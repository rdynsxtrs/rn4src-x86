# DP: testsuite updates, needed for the arm64 branch to apply cleanly

gcc/testsuite/

2012-09-24  Janis Johnson  <janisjo@codesourcery.com>

	Backport from mainline:

	2012-07-24  Janis Johnson  <janisjo@codesourcery.com>
	* lib/gcc-dg.exp (process-message): Don't ignore errors.

	2012-07-25  Janis Johnson  <janisjo@codesourcery.com>
	* g++.dg/cpp0x/nullptr21.c: Remove printfs, make self-checking.

	2012-07-26  Janis Johnson  <janisjo@codesourcery.com>
	* gcc.dg/pr45259.c: Only -fpic depends on fpic support.

	2012-09-18  Janis Johnson  <janisjo@codesourcery.com>
	* gcc.dg/vect/pr52298.c: Remove "dg-do run".

	2012-09-18  Janis Johnson  <janisjo@codesourcery.com>
	* lib/target-supports.exp
	(check_effective_target_vect_widen_mult_qi_to_hi,
	check_effective_target_vect_widen_mult_hi_to_si,
	check_effective_target_vect_widen_mult_qi_to_hi_pattern,
	check_effective_target_vect_widen_mult_hi_to_si_pattern,
	check_effective_target_vect_pack_trunc,
	check_effective_target_vect_unpack,
	check_effective_target_vect_multiple_sizes): Check arm_neon_ok
	instead of arm_none.

	2012-09-18  Janis Johnson  <janisjo@codesourcery.com>
	* gcc.dg/vect/no-vfa-vect-101.c: Skip a check for an irrelevant
	target instead of xfailing it.
	* gcc.dg/vect/no-vfa-vect-102.c: Likewise.
	* gcc.dg/vect/no-vfa-vect-102a.c: Likewise.
	* gcc.dg/vect/no-vfa-vect-37.c: Likewise.
	* gcc.dg/vect/no-vfa-vect-79.c: Likewise.
	* gcc.dg/vect/vect-104.c: Likewise.
	* gcc.dg/vect/vect-outer-1-big-array.c: Likewise.
	* gcc.dg/vect/vect-outer-1.c: Likewise.
	* gcc.dg/vect/vect-outer-1a-big-array.c: Likewise.
	* gcc.dg/vect/vect-outer-1a.c: Likewise.
	* gcc.dg/vect/vect-outer-1b-big-array.c: Likewise.
	* gcc.dg/vect/vect-outer-1b.c: Likewise.
	* gcc.dg/vect/vect-outer-2b.c: Likewise.
	* gcc.dg/vect/vect-outer-3a-big-array.c: Likewise.
	* gcc.dg/vect/vect-outer-3a.c: Likewise.
	* gcc.dg/vect/vect-outer-3b.c: Likewise.
	* gcc.dg/vect/vect-reduc-dot-s8b.c: Likewise.

	2012-09-18  Janis Johnson  <janisjo@codesourcery.com>
	* gcc.dg/vect/fast-math-pr35982.c: Skip check instead of xfail.

--- a/src/gcc/testsuite/lib/gcc-dg.exp	(revision 191673)
+++ b/src/gcc/testsuite/lib/gcc-dg.exp	(revision 191674)
@@ -745,7 +745,7 @@
     # Process the dg- directive, including adding the regular expression
     # to the new message entry in dg-messages.
     set msgcnt [llength ${dg-messages}]
-    catch { eval $msgproc $dgargs }
+    eval $msgproc $dgargs
 
     # If the target expression wasn't satisfied there is no new message.
     if { [llength ${dg-messages}] == $msgcnt } {
--- a/src/gcc/testsuite/lib/target-supports.exp	(revision 191673)
+++ b/src/gcc/testsuite/lib/target-supports.exp	(revision 191674)
@@ -2993,7 +2993,7 @@
 	    set et_vect_widen_mult_qi_to_hi_saved 0
 	}
         if { [istarget powerpc*-*-*]
-              || ([istarget arm*-*-*] && [check_effective_target_arm_neon]) } {
+              || ([istarget arm*-*-*] && [check_effective_target_arm_neon_ok]) } {
             set et_vect_widen_mult_qi_to_hi_saved 1
         }
     }
@@ -3027,7 +3027,7 @@
 	      || [istarget ia64-*-*]
 	      || [istarget i?86-*-*]
 	      || [istarget x86_64-*-*]
-              || ([istarget arm*-*-*] && [check_effective_target_arm_neon]) } {
+              || ([istarget arm*-*-*] && [check_effective_target_arm_neon_ok]) } {
             set et_vect_widen_mult_hi_to_si_saved 1
         }
     }
@@ -3048,7 +3048,7 @@
     } else {
         set et_vect_widen_mult_qi_to_hi_pattern_saved 0
         if { [istarget powerpc*-*-*]
-              || ([istarget arm*-*-*] && [check_effective_target_arm_neon]) } {
+              || ([istarget arm*-*-*] && [check_effective_target_arm_neon_ok]) } {
             set et_vect_widen_mult_qi_to_hi_pattern_saved 1
         }
     }
@@ -3073,7 +3073,7 @@
               || [istarget ia64-*-*]
               || [istarget i?86-*-*]
               || [istarget x86_64-*-*]
-              || ([istarget arm*-*-*] && [check_effective_target_arm_neon]) } {
+              || ([istarget arm*-*-*] && [check_effective_target_arm_neon_ok]) } {
             set et_vect_widen_mult_hi_to_si_pattern_saved 1
         }
     }
@@ -3203,7 +3203,7 @@
              || [istarget i?86-*-*]
              || [istarget x86_64-*-*]
              || [istarget spu-*-*]
-             || ([istarget arm*-*-*] && [check_effective_target_arm_neon]
+             || ([istarget arm*-*-*] && [check_effective_target_arm_neon_ok]
 		 && [check_effective_target_arm_little_endian]) } {
             set et_vect_pack_trunc_saved 1
         }
@@ -3229,7 +3229,7 @@
              || [istarget x86_64-*-*] 
              || [istarget spu-*-*]
              || [istarget ia64-*-*]
-             || ([istarget arm*-*-*] && [check_effective_target_arm_neon]
+             || ([istarget arm*-*-*] && [check_effective_target_arm_neon_ok]
 		 && [check_effective_target_arm_little_endian]) } {
             set et_vect_unpack_saved 1
         }
@@ -3646,7 +3646,7 @@
     global et_vect_multiple_sizes_saved
 
     set et_vect_multiple_sizes_saved 0
-    if { ([istarget arm*-*-*] && [check_effective_target_arm_neon]) } {
+    if { ([istarget arm*-*-*] && [check_effective_target_arm_neon_ok]) } {
        set et_vect_multiple_sizes_saved 1
     }
     if { ([istarget x86_64-*-*] || [istarget i?86-*-*]) } {
--- a/src/gcc/testsuite/gcc.dg/pr45259.c	(revision 191673)
+++ b/src/gcc/testsuite/gcc.dg/pr45259.c	(revision 191674)
@@ -1,6 +1,7 @@
 /* PR debug/45259 */
 /* { dg-do compile } */
-/* { dg-options "-g -O2 -fpic -w" { target fpic } } */
+/* { dg-options "-g -O2 -w -fpic" { target fpic } } */
+/* { dg-options "-g -O2 -w" { target { ! fpic } } } */
 
 struct S { void (*bar) (long); };
 struct T { struct S *t; };
--- a/src/gcc/testsuite/gcc.dg/vect/no-vfa-vect-79.c	(revision 191673)
+++ b/src/gcc/testsuite/gcc.dg/vect/no-vfa-vect-79.c	(revision 191674)
@@ -46,6 +46,6 @@
   If/when the aliasing problems are resolved, unalignment may
   prevent vectorization on some targets.  */
 /* { dg-final { scan-tree-dump-times "vectorized 1 loops" 1 "vect"  { xfail *-*-* } } } */
-/* { dg-final { scan-tree-dump-times "can't determine dependence" 1 "vect" { xfail vect_multiple_sizes } } } */
+/* { dg-final { scan-tree-dump-times "can't determine dependence" 1 "vect" { target { ! vect_multiple_sizes } } } } */
 /* { dg-final { scan-tree-dump-times "can't determine dependence" 2 "vect" { target vect_multiple_sizes } } } */
 /* { dg-final { cleanup-tree-dump "vect" } } */
--- a/src/gcc/testsuite/gcc.dg/vect/no-vfa-vect-102a.c	(revision 191673)
+++ b/src/gcc/testsuite/gcc.dg/vect/no-vfa-vect-102a.c	(revision 191674)
@@ -53,7 +53,7 @@
 }
 
 /* { dg-final { scan-tree-dump-times "vectorized 1 loops" 0 "vect" } } */
-/* { dg-final { scan-tree-dump-times "possible dependence between data-refs" 1 "vect" { xfail vect_multiple_sizes } } } */
+/* { dg-final { scan-tree-dump-times "possible dependence between data-refs" 1 "vect" { target { ! vect_multiple_sizes } } } } */
 /* { dg-final { scan-tree-dump-times "possible dependence between data-refs" 2 "vect" { target vect_multiple_sizes } } } */
 /* { dg-final { cleanup-tree-dump "vect" } } */
 
--- a/src/gcc/testsuite/gcc.dg/vect/vect-outer-3a-big-array.c	(revision 191673)
+++ b/src/gcc/testsuite/gcc.dg/vect/vect-outer-3a-big-array.c	(revision 191674)
@@ -49,6 +49,6 @@
 }
 
 /* { dg-final { scan-tree-dump-times "OUTER LOOP VECTORIZED" 1 "vect" { xfail vect_no_align } } } */
-/* { dg-final { scan-tree-dump-times "step doesn't divide the vector-size" 2 "vect" { xfail vect_multiple_sizes } } } */
+/* { dg-final { scan-tree-dump-times "step doesn't divide the vector-size" 2 "vect" { target { ! vect_multiple_sizes } } } } */
 /* { dg-final { scan-tree-dump-times "step doesn't divide the vector-size" 3 "vect" { target vect_multiple_sizes } } } */
 /* { dg-final { cleanup-tree-dump "vect" } } */
--- a/src/gcc/testsuite/gcc.dg/vect/vect-outer-1a.c	(revision 191673)
+++ b/src/gcc/testsuite/gcc.dg/vect/vect-outer-1a.c	(revision 191674)
@@ -20,6 +20,6 @@
 }
 
 /* { dg-final { scan-tree-dump-times "OUTER LOOP VECTORIZED" 1 "vect" { xfail *-*-* } } } */
-/* { dg-final { scan-tree-dump-times "strided access in outer loop" 1 "vect" { xfail vect_multiple_sizes } } } */
+/* { dg-final { scan-tree-dump-times "strided access in outer loop" 1 "vect" { target { ! vect_multiple_sizes } } } } */
 /* { dg-final { scan-tree-dump-times "strided access in outer loop" 2 "vect" { target vect_multiple_sizes } } } */
 /* { dg-final { cleanup-tree-dump "vect" } } */
--- a/src/gcc/testsuite/gcc.dg/vect/fast-math-pr35982.c	(revision 191673)
+++ b/src/gcc/testsuite/gcc.dg/vect/fast-math-pr35982.c	(revision 191674)
@@ -21,5 +21,5 @@
 }
 
 /* { dg-final { scan-tree-dump-times "vectorized 1 loops" 1 "vect" { target { vect_extract_even_odd || vect_strided2 } } } } */
-/* { dg-final { scan-tree-dump-times "vectorized 0 loops" 1 "vect" { xfail { vect_extract_even_odd || vect_strided2 } } } } */
+/* { dg-final { scan-tree-dump-times "vectorized 0 loops" 1 "vect" { target { ! { vect_extract_even_odd || vect_strided2 } } } } } */
 /* { dg-final { cleanup-tree-dump "vect" } } */
--- a/src/gcc/testsuite/gcc.dg/vect/vect-outer-1b.c	(revision 191673)
+++ b/src/gcc/testsuite/gcc.dg/vect/vect-outer-1b.c	(revision 191674)
@@ -22,6 +22,6 @@
 }
 
 /* { dg-final { scan-tree-dump-times "OUTER LOOP VECTORIZED" 1 "vect" { xfail *-*-* } } } */
-/* { dg-final { scan-tree-dump-times "strided access in outer loop" 1 "vect" { xfail vect_multiple_sizes } } } */
+/* { dg-final { scan-tree-dump-times "strided access in outer loop" 1 "vect" { target { ! vect_multiple_sizes } } } } */
 /* { dg-final { scan-tree-dump-times "strided access in outer loop" 2 "vect" { target vect_multiple_sizes } } } */
 /* { dg-final { cleanup-tree-dump "vect" } } */
--- a/src/gcc/testsuite/gcc.dg/vect/vect-outer-1a-big-array.c	(revision 191673)
+++ b/src/gcc/testsuite/gcc.dg/vect/vect-outer-1a-big-array.c	(revision 191674)
@@ -20,6 +20,6 @@
 }
 
 /* { dg-final { scan-tree-dump-times "OUTER LOOP VECTORIZED" 1 "vect" { xfail *-*-* } } } */
-/* { dg-final { scan-tree-dump-times "strided access in outer loop" 1 "vect" { xfail vect_multiple_sizes } } } */
+/* { dg-final { scan-tree-dump-times "strided access in outer loop" 1 "vect" { target { ! vect_multiple_sizes } } } } */
 /* { dg-final { scan-tree-dump-times "strided access in outer loop" 2 "vect" { target vect_multiple_sizes } } } */
 /* { dg-final { cleanup-tree-dump "vect" } } */
--- a/src/gcc/testsuite/gcc.dg/vect/vect-outer-2b.c	(revision 191673)
+++ b/src/gcc/testsuite/gcc.dg/vect/vect-outer-2b.c	(revision 191674)
@@ -37,6 +37,6 @@
   return 0;
 }
 
-/* { dg-final { scan-tree-dump-times "strided access in outer loop" 1 "vect" { xfail vect_multiple_sizes } } } */
+/* { dg-final { scan-tree-dump-times "strided access in outer loop" 1 "vect" { target { ! vect_multiple_sizes } } } } */
 /* { dg-final { scan-tree-dump-times "strided access in outer loop" 2 "vect" { target vect_multiple_sizes } } } */
 /* { dg-final { cleanup-tree-dump "vect" } } */
--- a/src/gcc/testsuite/gcc.dg/vect/vect-outer-3a.c	(revision 191673)
+++ b/src/gcc/testsuite/gcc.dg/vect/vect-outer-3a.c	(revision 191674)
@@ -49,6 +49,6 @@
 }
 
 /* { dg-final { scan-tree-dump-times "OUTER LOOP VECTORIZED" 1 "vect" { xfail vect_no_align } } } */
-/* { dg-final { scan-tree-dump-times "step doesn't divide the vector-size" 2 "vect" { xfail vect_multiple_sizes } } } */
+/* { dg-final { scan-tree-dump-times "step doesn't divide the vector-size" 2 "vect" { target { ! vect_multiple_sizes } } } } */
 /* { dg-final { scan-tree-dump-times "step doesn't divide the vector-size" 3 "vect" { target vect_multiple_sizes } } } */
 /* { dg-final { cleanup-tree-dump "vect" } } */
--- a/src/gcc/testsuite/gcc.dg/vect/no-vfa-vect-37.c	(revision 191673)
+++ b/src/gcc/testsuite/gcc.dg/vect/no-vfa-vect-37.c	(revision 191674)
@@ -58,6 +58,6 @@
    If/when the aliasing problems are resolved, unalignment may
    prevent vectorization on some targets.  */
 /* { dg-final { scan-tree-dump-times "vectorized 2 loops" 1 "vect" { xfail *-*-* } } } */
-/* { dg-final { scan-tree-dump-times "can't determine dependence" 2 "vect" { xfail vect_multiple_sizes } } } */
+/* { dg-final { scan-tree-dump-times "can't determine dependence" 2 "vect" { target { ! vect_multiple_sizes } } } } */
 /* { dg-final { scan-tree-dump-times "can't determine dependence" 4 "vect" { target vect_multiple_sizes } } } */
 /* { dg-final { cleanup-tree-dump "vect" } } */
--- a/src/gcc/testsuite/gcc.dg/vect/vect-outer-3b.c	(revision 191673)
+++ b/src/gcc/testsuite/gcc.dg/vect/vect-outer-3b.c	(revision 191674)
@@ -49,6 +49,6 @@
 }
 
 /* { dg-final { scan-tree-dump-times "OUTER LOOP VECTORIZED" 1 "vect" { xfail *-*-* } } } */
-/* { dg-final { scan-tree-dump-times "strided access in outer loop" 2 "vect" { xfail vect_multiple_sizes } } } */
+/* { dg-final { scan-tree-dump-times "strided access in outer loop" 2 "vect" { target { ! vect_multiple_sizes } } } } */
 /* { dg-final { scan-tree-dump-times "strided access in outer loop" 4 "vect" { target vect_multiple_sizes } } } */
 /* { dg-final { cleanup-tree-dump "vect" } } */
--- a/src/gcc/testsuite/gcc.dg/vect/vect-outer-1-big-array.c	(revision 191673)
+++ b/src/gcc/testsuite/gcc.dg/vect/vect-outer-1-big-array.c	(revision 191674)
@@ -22,6 +22,6 @@
 }
 
 /* { dg-final { scan-tree-dump-times "OUTER LOOP VECTORIZED" 1 "vect" { xfail *-*-* } } } */
-/* { dg-final { scan-tree-dump-times "strided access in outer loop" 1 "vect" { xfail vect_multiple_sizes } } } */
+/* { dg-final { scan-tree-dump-times "strided access in outer loop" 1 "vect" { target { ! vect_multiple_sizes } } } } */
 /* { dg-final { scan-tree-dump-times "strided access in outer loop" 2 "vect" { target vect_multiple_sizes } } } */
 /* { dg-final { cleanup-tree-dump "vect" } } */
--- a/src/gcc/testsuite/gcc.dg/vect/no-vfa-vect-101.c	(revision 191673)
+++ b/src/gcc/testsuite/gcc.dg/vect/no-vfa-vect-101.c	(revision 191674)
@@ -45,7 +45,7 @@
 }
 
 /* { dg-final { scan-tree-dump-times "vectorized 1 loops" 0 "vect" } } */
-/* { dg-final { scan-tree-dump-times "can't determine dependence" 1 "vect" { xfail vect_multiple_sizes } } } */
+/* { dg-final { scan-tree-dump-times "can't determine dependence" 1 "vect" { target { ! vect_multiple_sizes } } } } */
 /* { dg-final { scan-tree-dump-times "can't determine dependence" 2 "vect" { target vect_multiple_sizes } } } */
 /* { dg-final { cleanup-tree-dump "vect" } } */
 
--- a/src/gcc/testsuite/gcc.dg/vect/no-vfa-vect-102.c	(revision 191673)
+++ b/src/gcc/testsuite/gcc.dg/vect/no-vfa-vect-102.c	(revision 191674)
@@ -53,7 +53,7 @@
 }
 
 /* { dg-final { scan-tree-dump-times "vectorized 1 loops" 0 "vect" } } */
-/* { dg-final { scan-tree-dump-times "possible dependence between data-refs" 1 "vect" { xfail vect_multiple_sizes } } } */
+/* { dg-final { scan-tree-dump-times "possible dependence between data-refs" 1 "vect" { target { ! vect_multiple_sizes } } } } */
 /* { dg-final { scan-tree-dump-times "possible dependence between data-refs" 2 "vect" { target vect_multiple_sizes } } } */
 /* { dg-final { cleanup-tree-dump "vect" } } */
 
--- a/src/gcc/testsuite/gcc.dg/vect/vect-reduc-dot-s8b.c	(revision 191673)
+++ b/src/gcc/testsuite/gcc.dg/vect/vect-reduc-dot-s8b.c	(revision 191674)
@@ -58,7 +58,7 @@
 }
 
 /* { dg-final { scan-tree-dump-times "vect_recog_dot_prod_pattern: detected" 1 "vect" { xfail *-*-* } } } */
-/* { dg-final { scan-tree-dump-times "vect_recog_widen_mult_pattern: detected" 1 "vect" { xfail vect_multiple_sizes } } } */
+/* { dg-final { scan-tree-dump-times "vect_recog_widen_mult_pattern: detected" 1 "vect" { target { ! vect_multiple_sizes } } } } */
 /* { dg-final { scan-tree-dump-times "vect_recog_widen_mult_pattern: detected" 2 "vect" { target vect_multiple_sizes } } } */
 
 /* { dg-final { scan-tree-dump-times "vectorized 1 loops" 1 "vect" { xfail *-*-* } } } */
--- a/src/gcc/testsuite/gcc.dg/vect/pr52298.c	(revision 191673)
+++ b/src/gcc/testsuite/gcc.dg/vect/pr52298.c	(revision 191674)
@@ -1,4 +1,3 @@
-/* { dg-do run } */
 /* { dg-options "-O1 -ftree-vectorize -fno-tree-pre -fno-tree-loop-im" } */
 
 extern void abort (void);
--- a/src/gcc/testsuite/gcc.dg/vect/vect-outer-1.c	(revision 191673)
+++ b/src/gcc/testsuite/gcc.dg/vect/vect-outer-1.c	(revision 191674)
@@ -22,6 +22,6 @@
 }
 
 /* { dg-final { scan-tree-dump-times "OUTER LOOP VECTORIZED" 1 "vect" { xfail *-*-* } } } */
-/* { dg-final { scan-tree-dump-times "strided access in outer loop" 1 "vect" { xfail vect_multiple_sizes } } } */
+/* { dg-final { scan-tree-dump-times "strided access in outer loop" 1 "vect" { target { ! vect_multiple_sizes } } } } */
 /* { dg-final { scan-tree-dump-times "strided access in outer loop" 2 "vect" { target vect_multiple_sizes } } } */
 /* { dg-final { cleanup-tree-dump "vect" } } */
--- a/src/gcc/testsuite/gcc.dg/vect/vect-outer-1b-big-array.c	(revision 191673)
+++ b/src/gcc/testsuite/gcc.dg/vect/vect-outer-1b-big-array.c	(revision 191674)
@@ -22,6 +22,6 @@
 }
 
 /* { dg-final { scan-tree-dump-times "OUTER LOOP VECTORIZED" 1 "vect" { xfail *-*-* } } } */
-/* { dg-final { scan-tree-dump-times "strided access in outer loop" 1 "vect" { xfail vect_multiple_sizes } } } */
+/* { dg-final { scan-tree-dump-times "strided access in outer loop" 1 "vect" { target { ! vect_multiple_sizes } } } } */
 /* { dg-final { scan-tree-dump-times "strided access in outer loop" 2 "vect" { target vect_multiple_sizes } } } */
 /* { dg-final { cleanup-tree-dump "vect" } } */
--- a/src/gcc/testsuite/gcc.dg/vect/vect-104.c	(revision 191673)
+++ b/src/gcc/testsuite/gcc.dg/vect/vect-104.c	(revision 191674)
@@ -64,7 +64,7 @@
 }
 
 /* { dg-final { scan-tree-dump-times "vectorized 1 loops" 0 "vect" } } */
-/* { dg-final { scan-tree-dump-times "possible dependence between data-refs" 1 "vect" { xfail vect_multiple_sizes } } } */
+/* { dg-final { scan-tree-dump-times "possible dependence between data-refs" 1 "vect" { target { ! vect_multiple_sizes } } } } */
 /* { dg-final { scan-tree-dump-times "possible dependence between data-refs" 2 "vect" { target vect_multiple_sizes } } } */
 /* { dg-final { cleanup-tree-dump "vect" } } */
 
--- a/src/gcc/testsuite/g++.dg/cpp0x/nullptr21.C	(revision 191673)
+++ b/src/gcc/testsuite/g++.dg/cpp0x/nullptr21.C	(revision 191674)
@@ -3,42 +3,53 @@
 
 // Test throw and catch
 
-#include <cstdio>
+extern "C" void abort (void);
 
 typedef decltype(nullptr) nullptr_t;
 
+int result[2];
+
+void __attribute__((noinline))
+foo (int i, int j)
+{
+  result[i] = j;
+}
+
 int main()
 {
   try {
     throw nullptr;
   } catch (void*) {
-    printf("Test 1 Fail");
+    foo (0, 1);
   } catch (bool) {
-    printf("Test 1 Fail");
+    foo (0, 2);
   } catch (int) {
-    printf("Test 1 Fail");
+    foo (0, 3);
   } catch (long int) {
-    printf("Test 1 Fail");
+    foo (0, 4);
   } catch (nullptr_t) {
-    printf("Test 1 OK");
+    foo (0, 5);
   } catch (...) {
-    printf("Test 1 Fail");
-  }  // { dg-output "Test 1 OK" }
+    foo (0, 6);
+  }
 
   nullptr_t mynull = 0;
   try {
     throw mynull;
   } catch (void*) {
-    printf("Test 2 Fail");
+    foo (1, 1);
   } catch (bool) {
-    printf("Test 2 Fail");
+    foo (1, 2);
   } catch (int) {
-    printf("Test 2 Fail");
+    foo (1, 3);
   } catch (long int) {
-    printf("Test 2 Fail");
+    foo (1, 4);
   } catch (nullptr_t) {
-    printf("Test 2 OK");
+    foo (1, 5);
   } catch (...) {
-    printf("Test 2 Fail");
-  }  // { dg-output "Test 2 OK" }
+    foo (1, 6);
+  }
+
+  if (result[0] != 5 || result[1] != 5)
+    abort ();
 }
